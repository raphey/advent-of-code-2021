from utils.utils_25 import get_raw_items, get_regex_search, get_regex_findall, regex, translate
from utils.utils_25 import memo
from inputs.input_24 import main_input

from itertools import combinations, permutations
import copy
import re
from collections import Counter, defaultdict
from random import sample, randint


sample_input = """inp w
add z w
mod z 2
div w 2
add y w
mod y 2
div w 2
add x w
mod x 2
div w 2
mod w 2"""


def get_parsed(raw_input):
    parsed = []
    for raw_item in get_raw_items(raw_input, split_token='\n'):
        parsed_item = tuple(raw_item.split())
        parsed.append(parsed_item)
    return parsed


def get_reversed_instructions(instructions):
    rev_inst = [("inp", "z", 0)]
    for inst in instructions[::-1]:
        if inst[0] == "add":
            rev_inst.append(("sub",) + inst[1:])
        if inst[0] == "sub":
            rev_inst.append(("add",) + inst[1:])
        if inst[0] == "mul":
            rev_inst.append(("div",) + inst[1:])
        if inst[0] == "div":
            rev_inst.append(("mul",) + inst[1:])

class ALU:
    def __init__(self):
        self.w = 0
        self.x = 0
        self.y = 0
        self.z = 0

    def get_b_val(self, b):
        try:
            return int(b)
        except ValueError:
            return getattr(self, b)

    def inp(self, a, value):
        setattr(self, a, value)

    def add(self, a, b):
        b_val = self.get_b_val(b)
        setattr(self, a, getattr(self, a) + b_val)

    def mul(self, a, b):
        b_val = self.get_b_val(b)
        setattr(self, a, getattr(self, a) * b_val)

    def div(self, a, b):
        b_val = self.get_b_val(b)
        setattr(self, a, getattr(self, a) // b_val)

    def mod(self, a, b):
        b_val = self.get_b_val(b)
        setattr(self, a, getattr(self, a) % b_val)

    def eql(self, a, b):
        b_val = self.get_b_val(b)
        setattr(self, a, 1 if getattr(self, a) == b_val else 0)

    def __repr__(self):
        return str((self.w, self.x, self.y, self.z))

    def is_legit(self):
        return self.z == 0


def get_mutated(start_str, k):
    new_str = start_str
    for i in sample(range(13), k):
        new_str = new_str[:i + 1] + str(randint(1, 9)) + new_str[i + 2:]  # keep leading digit
        # new_str = new_str[:i] + str(randint(1, 9)) + new_str[i + 1:]
    return new_str

def part_1(raw_input):
    instructions = get_parsed(raw_input)
    answer = ""
    # answer thus far:
    # 31111234682151
    # 31111121384351
    # 31111121382151
    short_list = []
    fifty_candidates = ['11513593592217', '11211193422417', '11219693292112', '11284863592117', '11211793882117', '15811893598317', '11219593599117', '11211193562154', '12811393592197', '16211893312115', '11911293592617', '11411993595118', '18721893595117', '11511873522117', '11511893592527', '11211846532147', '12211893536917', '11211393422127', '11211823591412', '11211853592114', '11515893595117', '11211887593115', '16761893192117', '11211893592957', '11511893962187', '17211893592232', '11491823592817', '11217843592717', '11211794542117', '11231893563117', '15517893592617', '11261813792217', '13271553592117', '11911893582217', '11211313592547', '12281893592114', '11281933512117', '16541893599117', '17217892592217', '11216853695117', '11711893597117', '11241843592113', '11214183592157', '11211813582117', '11191833592115', '11211843537112', '18275693592117', '11217893282117', '17261893592118', '19215893292114']
    fifty_candidates = ['11211893592117', '11211893593217', '11211893593228', '11211893598752', '11211896892117', '11288893593217', '12211893596528', '12288893596517', '13111893582117', '13211893592172', '13211893592172', '13299893592117', '14277453592117', '17211893592128', '17211893598728', '17277673592117', '18277893597617', '19111893583217', '19288563592117', '12211123592164', '12244893592164', '15211453592194', '11211893595456', '11211893597656', '11111893582157', '11211123595457', '11211783592157', '11211893592157', '11211893596557', '15211783592197', '11211893592158', '11266893592158', '11211453592111', '11211893592131', '12211453592131', '12211893592121', '12211893597611', '12233893592171', '13244893592111', '13288893592111', '17211893596561', '18255893592181', '19211893598751', '11211783593212', '11211893592112', '11211893592112', '11266893592112', '11299893592142', '11299895792112', '12211893592192']
    fifty_candidates = ['11111891382151', '11111893582151', '11211123595451', '11211233595451', '11211783592151', '11211783595451', '11211893592151', '11211893596551', '11211896896551', '11255893598751', '11266893592151', '11266895792151', '11277893598751', '11288893592151', '12211123592161', '12211123592161', '12211563592161', '12211893593261', '12244893592161', '12255893592161', '12288893596561', '13111894682171', '13211453592171', '13211893592171', '13233894692171', '13299893592171', '15211123592191', '15211453592191', '15211453595491', '15211786892191', '15211893592191', '15211893598791', '15222453592191', '15288893596591', '15299893592191', '11111783582117', '11111783583217', '11111893582128', '11111893582139', '11111893582152', '11111893583217', '11111896882152', '11111897982117', '11211123595417', '11211123595417', '11211123595452', '11211233592152', '11211343595452', '11211343598752', '11211453592117']
    fifty_candidates = ['11111121382151', '11111124682151', '11111231382151', '11111452482151', '11111671382151', '11111671382151', '11111673583251', '11111893582151', '11111893582151', '11111893582151', '11111893584351', '11111893585451', '11111895782151', '11111896882151', '11111896882151', '11111896886551', '11166893582151', '11211123592151', '11211123595451', '11211123595451', '11211123596551', '11211126895451', '11211233592151', '11211233592151', '11211343592151', '11211343595451', '11211343595451', '11211343595451', '11211345796551', '11211453595451', '11211563592151', '11211566896551', '11211783592151', '11211783595451', '11211783599851', '11211783599851', '11211784692151', '11211891392151', '11211893592151', '11211893592151', '11211893592151', '11211893592151', '11211893592151', '11211893593251', '11211893597651', '11211893598751', '11211893598751', '11211893599851', '11211895792151', '11211895792151']
    fifty_candidates = ['11111121382151', '11111121383251', '11111123583251', '11111124682151', '11111124685451', '11111125782151', '11111125782151', '11111126882151', '11111126885451', '11111126885451', '11111126886551', '11111127982151', '11111127982151', '11111233582151', '11111236882151', '11111342482151', '11111343582151', '11111343585451', '11111451382151', '11111451382151', '11111451382151', '11111451382151', '11111452482151', '11111452485451', '11111456886551', '11111566882151', '11111671382151', '11111671382151', '11111671386551', '11111671387651', '11111671387651', '11111671388751', '11111673582151', '11111673582151', '11111673583251', '11111673588751', '11111673589851', '11111673589851', '11111675783251', '11111676882151', '11111676882151', '11111677982151', '11111783582151', '11111786882151', '11111787982151', '11111891382151', '11111891382151', '11111891382151', '11111891385451', '11111892482151']
    fifty_candidates = ['31111234682151', '31111341388751', '31122566886551', '31122673588751', '31144451382151', '33111451382171']
    fifty_candidates = ['31111231382151', '31111233582151', '31111234682151', '31111234686551', '31111236887651', '31111237982151', '31111341387651', '31111341388751', '31111451382151', '31111564682151', '31111564682151', '31111671388751', '31122566882151', '31122566883251', '31122566883251', '31122566886551', '31122566886551', '31122566889851', '31122673588751', '31122673588751', '31122673588751', '31122673588751', '31122673589851', '31122783588751', '31122786886551', '31144231382151', '31144451382151', '31144451387651', '31144456882151', '31166451382151', '31188451382151', '31188451384351', '31188566886551', '31222673598751', '31288566896551', '33111671384371', '33111671386571', '33144451382171', '33211451392171', '34122783588781', '35122566886591', '11111234682151', '11111234682151', '11122566886551', '11122566886551', '11144561382151', '11155234682151', '12111341388761', '13111451382171', '13111452482171']
    fifty_candidates = ['31111121382151', '31111124682151', '31111231382151', '31111231382151', '31111231382151', '31111231382151', '31111231387651', '31111232482151', '31111233582151', '31111234682151', '31111234682151', '31111234682151', '31111234682151', '31111234682151', '31111234687651', '31111235782151', '31111236882151', '31111236887651', '31111236887651', '31111236887651', '31111236888751', '31111341383251', '31111341388751', '31111341388751', '31111341389851', '31111343587651', '31111344682151', '31111344682151', '31111344682151', '31111346887651', '31111451382151', '31111451382151', '31111451384351', '31111451385451', '31111451388751', '31111564682151', '31111564682151', '31111564682151', '31111564684351', '31111564686551', '31111566882151', '31111567989851', '31111671382151', '31111781382151', '31111781388751', '31111783582151', '31111784682151', '31111784682151', '31111784684351', '31111896887651']
    fifty_candidates = ['1' + c[1:] for c in fifty_candidates]
    fifty_candidates = ['11111121382151', '11111121382151', '11111121384351', '11111121388751', '11111121388751', '11111121389851', '11111123582151', '11111123587651', '11111124682151', '11111124682151']
    fifty_candidates = ['11111123588751', '11111124686551', '11111124687651', '11111125782151', '11111676888751', '11111891385451', '11122121388751', '11133121384351', '13111234682171', '11111121389817', '11111123587617', '11111123587628', '11111126883252', '11111674682117', '18111121382128', '18111121389828', '11111121382153', '11111121387653', '11111125782153', '11111127984353', '11111674685453', '11188124682153', '12199121389863', '15122121382194', '11122124682155', '11133561389855', '11111121387656', '11111124687656', '11111126887656', '11111784682156', '11155121382156', '11111121382157', '11111121384357', '11111121388757', '11122783587657', '11166894682157', '11188781384357', '11211123592157', '11111121389858', '15111121388798', '11111121382159', '11111121388759', '11111124682159', '11111124685459', '11199123582159', '11111121382121', '11111121384391', '11111121386561', '11111121388711', '11111121388761']
    fifty_candidates = ['11111122489851', '11111124684351', '11111125785451', '11111125787651', '11111127986551', '11111562484351', '11111564686551', '11111781382151', '11111784689851', '11122673587651', '11133451384351', '11133671384351', '11166121384351', '11177125782151', '11188781384351', '11211123598751', '11211344695451', '12111121382161', '12111121384361', '14111121384381', '15111121384391', '15211121392191', '11111121382128', '11111121382152', '11111121382152', '11111121382152', '11111121383217', '11111121387639', '11111121388717', '11111121388717', '11111121389839', '11111123587617', '11111124682139', '11111124686539', '11111125784328', '11111125786552', '11111126883252', '11111451382128', '11111672488728', '11111674685452', '11111894682128', '11133563587617', '11144124682152', '11166121382117', '11166126887639', '11166783587652', '11177121387652', '11188781384352', '11199121382128', '11199123582152']
    fifty_candidates = ['31111121382151', '31111124682151', '31111231382151', '31111231382151', '31111231382151', '31111231382151', '31111231387651', '31111232482151', '31111233582151', '31111234682151', '31111234682151', '31111234682151', '31111234682151', '31111234682151', '31111234687651', '31111235782151', '31111236882151', '31111236887651', '31111236887651', '31111236887651', '31111236888751', '31111341383251', '31111341388751', '31111341388751', '31111341389851', '31111343587651', '31111344682151', '31111344682151', '31111344682151', '31111346887651', '31111451382151', '31111451382151', '31111451384351', '31111451385451', '31111451388751', '31111564682151', '31111564682151', '31111564682151', '31111564684351', '31111564686551', '31111566882151', '31111567989851', '31111671382151', '31111781382151', '31111781388751', '31111783582151', '31111784682151', '31111784682151', '31111784684351', '31111896887651']
    fifty_candidates = ['31111121384351', '31111124689851', '31111231384351', '31111232484351', '31111233582151', '31111233587651', '31111234683251', '31111234684351', '31111234686551', '31111235782151', '31111235786551', '31111235788751', '31111236882151', '31111236888751', '31111237982151', '31111237982151', '31111341382151', '31111344682151', '31111345782151', '31111346882151', '31111451385451', '31111457988751', '31111561382151', '31111563582151', '31111564684351', '31111564686551', '31111566882151', '31111566882151', '31111674684351', '31111674684351', '31111781382151', '31111781385451', '31111782482151', '31111783582151', '31111786882151', '31111786889851', '31111787982151', '31111787984351', '31111891382151', '31111891383251', '31111891389851', '31111894682151', '31111897989851', '31122234684351', '31122235788751', '31122236882151', '31122346887651', '31133234682151', '31133564684351', '31133781384351']


    scores_and_strings = []
    for j, current_best_str in enumerate(fifty_candidates):  # [  # , z_min in [
        # ('81299897999854', 10),
        # ('81299897999852', 8),
        # ('81299897999853', 9),
        # ('85299897999895', 11),
        # ('81299567999854', 10),
        # ('81299897999851', 7),
        # ('82299897999864', 10),
        # ('81255897999851', 7),
        # ('81299897998754', 10),
        # ('81299897999855', 11),
        # ('81299897998754', 10),
        # ('81299897999852', 8),
        # ('81299897997654', 10),
        # ('81299787999851', 7),
        # ('81299897999851', 7),
        # ('85299897999896', 0)
        # '81299897999856',
        #  '82299897999866',
        #  '83299347999876',
        #  '84266897999886',
        #  '84299897999886',
        #  '85211897999896',
        #  '85222457999896',
        #  '85222897999896',
        #  '85233897999896',
        #  '85244895799896',
        #  '85244897992196',
        #  '85244897999896',
        #  '85255893599896',
        #  '85266897999896',
        #  '85277897999896',
        #  '85288237999896',
        #  '85288897999896',
        #  '85299127999896',
        #  '85299237999896',
        #  '85299347999896',
        #  '85299456899896',
        #  '85299457999896',
        #  '85299677999896',
        #  '85299891399896',
        #  '85299893599896',
        #  '85299895799896',
        #  '85299896899896',
        #  '85299897992196',
        #  '85299897993296',
        #  '85299897994396',
        #  '85299897997696',
        #  '85299897998796',
        #  '85299897999896'
        # ('11111111111111', 99464333),
        # ('11811121211117', 5666),
        # ('11811127212117', 217),
        # ('11211123592112', 216),
        # ('11211127992111', 215),
        # '11211893592117',
        # '19211123597617',
        # '11211123598752',
        # '12211121392162',
        # '11277123592151',
        # '11211123595428',
        # '11299123597652',
        # '19211123592139',
        # '17211783592117',
        # '18233123592117',
        # '18211124692117',
        # '11211123597652',
        # '13211123592117',
        # '15211233592139',
        # '16211897992117',
        # '11277127992128',
        # '16211123592117',
        # '11211677992152',
        # '11211123592117',
        # '14211127992117',
        # '11222127992128',
        # '11211127997652',
        # '11255127992151',
        # '11288127992117',
        # '15211121392117',
        # '11211127999851',
        # '11111127982139',
        # '15211127992128',
        # '16211127992128',
        # '11211127992151',
        # '11211127992151',
        # '18211124692117',
        # '11211122496517',
    # ]:
        # for i in range(31111121382151, 31111111111110, -1):
        #     if i % 10000 == 0:
        #         print(i)
        print(j)
        for i in range(10**4):
            # str_i = str(i)
            str_i = get_mutated(current_best_str, 5)
            # if '0' in str_i:
            #     continue
            inputs = [int(d) for d in str_i]
            assert len(inputs) == 14
            alu = ALU()
            for inst in instructions:
                if inst[0] == "inp":
                    alu.inp(inst[1], inputs.pop(0))
                else:
                    getattr(alu, inst[0])(inst[1], inst[2])
            scores_and_strings.append((alu.z, str_i))
            if alu.z == 0:
                print(str_i)
                short_list.append(str_i)
                # break
            # elif alu.z <= 8:
            #     print(f"'{str_i}'")

    scores_and_strings.sort()
    print(scores_and_strings[:50])
    print([s for _, s in scores_and_strings[:50]])
    print(sorted(set(short_list)))
    # print(max(short_list))
    print(f'Part1: {answer}')


def part_2(raw_input):
    parsed = get_parsed(raw_input)
    answer = 0
    print(f'Part2: {answer}')


# part_1(sample_input)
part_1(main_input)

part_2(sample_input)
part_2(main_input)
